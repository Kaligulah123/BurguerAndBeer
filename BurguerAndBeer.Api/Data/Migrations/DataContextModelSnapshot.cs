// <auto-generated />
using System;
using BurguerAndBeer.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BurguerAndBeer.Api.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BurguerAndBeer.Api.Data.Entities.Beer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Beer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            Description = "A refreshing pale ale with hints of citrus and a balanced malt profile.",
                            Image = "https://github.com/Kaligulah123/Images-Icons/blob/main/Beers/beer1.png?raw=true",
                            Name = "Pale Ale",
                            Price = 4.9900000000000002
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Description = "A bold India Pale Ale with strong hoppy aromas and a crisp finish.",
                            Image = "https://github.com/Kaligulah123/Images-Icons/blob/main/Beers/beer2.png?raw=true",
                            Name = "IPA",
                            Price = 5.4900000000000002
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Description = "A dark stout with rich chocolate and coffee flavors.",
                            Image = "https://github.com/Kaligulah123/Images-Icons/blob/main/Beers/beer3.png?raw=true",
                            Name = "Stout",
                            Price = 5.9900000000000002
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Description = "A light and crisp wheat beer with notes of banana and clove.",
                            Image = "https://github.com/Kaligulah123/Images-Icons/blob/main/Beers/beer4.png?raw=true",
                            Name = "Wheat Beer",
                            Price = 4.4900000000000002
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            Description = "A classic lager with a clean taste and a smooth finish.",
                            Image = "https://github.com/Kaligulah123/Images-Icons/blob/main/Beers/beer5.png?raw=true",
                            Name = "Lager",
                            Price = 4.9900000000000002
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            Description = "A crisp and refreshing pilsner with a slight floral hop aroma.",
                            Image = "https://github.com/Kaligulah123/Images-Icons/blob/main/Beers/beer6.png?raw=true",
                            Name = "Pilsner",
                            Price = 4.79
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            Description = "A smooth amber ale with caramel notes and a balanced bitterness.",
                            Image = "https://github.com/Kaligulah123/Images-Icons/blob/main/Beers/beer7.png?raw=true",
                            Name = "Amber Ale",
                            Price = 5.29
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            Description = "A rich porter with roasted malt flavors and hints of vanilla.",
                            Image = "https://github.com/Kaligulah123/Images-Icons/blob/main/Beers/beer8.png?raw=true",
                            Name = "Porter",
                            Price = 5.79
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            Description = "A farmhouse ale with fruity and spicy notes, perfect for summer.",
                            Image = "https://github.com/Kaligulah123/Images-Icons/blob/main/Beers/beer9.png?raw=true",
                            Name = "Saison",
                            Price = 5.4900000000000002
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            Description = "A nutty brown ale with hints of toffee and a smooth finish.",
                            Image = "https://github.com/Kaligulah123/Images-Icons/blob/main/Beers/beer10.png?raw=true",
                            Name = "Brown Ale",
                            Price = 5.29
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 2,
                            Description = "A complex Belgian ale with fruity esters and a spicy yeast character.",
                            Image = "https://github.com/Kaligulah123/Images-Icons/blob/main/Beers/beer11.png?raw=true",
                            Name = "Belgian Ale",
                            Price = 6.4900000000000002
                        });
                });

            modelBuilder.Entity("BurguerAndBeer.Api.Data.Entities.Burguer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Burguer");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Burger with beef patty, cheddar cheese, lettuce, tomato, and special sauce.",
                            Image = "https://github.com/Kaligulah123/Images-Icons/blob/main/Burguers/burguer1.png?raw=true",
                            Name = "Classic Supreme",
                            Price = 5.9900000000000002
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "Smoked meat with BBQ sauce, crispy onion, and gouda cheese.",
                            Image = "https://github.com/Kaligulah123/Images-Icons/blob/main/Burguers/burguer2.png?raw=true",
                            Name = "BBQ Texan",
                            Price = 6.9900000000000002
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Description = "Loaded with cheddar cheese, crispy bacon, and special mayonnaise.",
                            Image = "https://github.com/Kaligulah123/Images-Icons/blob/main/Burguers/burguer3.png?raw=true",
                            Name = "Cheddar Bacon Deluxe",
                            Price = 7.4900000000000002
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Description = "Beef patty with Swiss cheese, caramelized pineapple, and teriyaki sauce.",
                            Image = "https://github.com/Kaligulah123/Images-Icons/blob/main/Burguers/burguer4.png?raw=true",
                            Name = "Tropical Hawaiian",
                            Price = 6.4900000000000002
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            Description = "With jalapeños, hot sauce, pepper jack cheese, and onion.",
                            Image = "https://github.com/Kaligulah123/Images-Icons/blob/main/Burguers/burguer5.png?raw=true",
                            Name = "Inferno Spicy",
                            Price = 6.9900000000000002
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            Description = "Double smashed patty, cheddar cheese, and special sauce.",
                            Image = "https://github.com/Kaligulah123/Images-Icons/blob/main/Burguers/burguer6.png?raw=true",
                            Name = "Double Smashburger",
                            Price = 7.9900000000000002
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 1,
                            Description = "Vegetarian burger with fresh vegetables and hummus.",
                            Image = "https://github.com/Kaligulah123/Images-Icons/blob/main/Burguers/burguer7.png?raw=true",
                            Name = "Veggie Lovers",
                            Price = 5.4900000000000002
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            Description = "Grilled portobello mushroom, Swiss cheese, and garlic mayonnaise.",
                            Image = "https://github.com/Kaligulah123/Images-Icons/blob/main/Burguers/burguer8.png?raw=true",
                            Name = "Portobello Melt",
                            Price = 6.9900000000000002
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 1,
                            Description = "Beef patty with truffle oil, brie cheese, and arugula.",
                            Image = "https://github.com/Kaligulah123/Images-Icons/blob/main/Burguers/burguer9.png?raw=true",
                            Name = "Gourmet Truffle",
                            Price = 8.9900000000000002
                        });
                });

            modelBuilder.Entity("BurguerAndBeer.Api.Data.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Burguer"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Beer"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Chips"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Dessert"
                        });
                });

            modelBuilder.Entity("BurguerAndBeer.Api.Data.Entities.Chips", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Chips");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 3,
                            Description = "Crispy golden French fries, lightly salted.",
                            Image = "https://github.com/Kaligulah123/Images-Icons/blob/main/Chips/patatas1.png?raw=true",
                            Name = "French Fries",
                            Price = 2.4900000000000002
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 3,
                            Description = "French fries topped with crispy bacon and a savory sauce.",
                            Image = "https://github.com/Kaligulah123/Images-Icons/blob/main/Chips/patatas2.png?raw=true",
                            Name = "Bacon Fries",
                            Price = 3.29
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            Description = "Thick-cut potato wedges, perfectly seasoned and baked until golden.",
                            Image = "https://github.com/Kaligulah123/Images-Icons/blob/main/Chips/patatas3.png?raw=true",
                            Name = "Wedges Fries",
                            Price = 2.9900000000000002
                        });
                });

            modelBuilder.Entity("BurguerAndBeer.Api.Data.Entities.Dessert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Dessert");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 4,
                            Description = "A rich chocolate cupcake topped with creamy chocolate frosting.",
                            Image = "https://github.com/Kaligulah123/Images-Icons/blob/main/Desserts/cupcake_chocolate.png?raw=true",
                            Name = "Chocolate Cupcake ",
                            Price = 2.9900000000000002
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 4,
                            Description = "A delightful strawberry cupcake with a fresh strawberry glaze.",
                            Image = "https://github.com/Kaligulah123/Images-Icons/blob/main/Desserts/cupcake_fresa.png?raw=true",
                            Name = "Strawberry Cupcake",
                            Price = 2.79
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 4,
                            Description = "A moist blackberry cupcake with a tangy cream cheese frosting.",
                            Image = "https://github.com/Kaligulah123/Images-Icons/blob/main/Desserts/cupcake_mora.png?raw=true",
                            Name = "Blackberry Cupcake",
                            Price = 2.8900000000000001
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            Description = "A classic red velvet cupcake with a smooth cream cheese frosting.",
                            Image = "https://github.com/Kaligulah123/Images-Icons/blob/main/Desserts/cupcake_redvelvet.png?raw=true",
                            Name = "Red Velvet Cupcake",
                            Price = 3.1899999999999999
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 4,
                            Description = "A decadent chocolate tart with a buttery crust and rich ganache filling.",
                            Image = "https://github.com/Kaligulah123/Images-Icons/blob/main/Desserts/tarta_chocolate.png?raw=true",
                            Name = "Chocolate Pie",
                            Price = 4.9900000000000002
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 4,
                            Description = "A creamy butter tart with a flaky pastry and smooth filling.",
                            Image = "https://github.com/Kaligulah123/Images-Icons/blob/main/Desserts/tarta_mantequilla.png?raw=true",
                            Name = "Butter Pie",
                            Price = 4.4900000000000002
                        });
                });

            modelBuilder.Entity("BurguerAndBeer.Api.Data.Entities.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("OrderAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<string>("UserAddress")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("BurguerAndBeer.Api.Data.Entities.OrderItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("BurguerAndBeer.Api.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BurguerAndBeer.Api.Data.Entities.OrderItem", b =>
                {
                    b.HasOne("BurguerAndBeer.Api.Data.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BurguerAndBeer.Api.Data.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
